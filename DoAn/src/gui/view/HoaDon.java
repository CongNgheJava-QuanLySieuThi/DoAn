/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.view;

import javax.swing.JOptionPane;
import pojo.SQLServerDataProvider;
      
      

import javax.swing.JOptionPane;
import pojo.SQLServerDataProvider;
      
      
import java.sql.Connection;
import dao.MucDonHangDAO;
import java.sql.PreparedStatement;
import dao.HoaDonDAO;   
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import java.io.FileOutputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.sql.DriverManager;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.xssf.usermodel.XSSFCell;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.Font;
import com.itextpdf.text.Font.FontFamily;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;

import java.io.FileOutputStream;
import java.io.FileNotFoundException;
import java.time.format.DateTimeFormatter;


/**
 *
 * @author Admin
 */

public class HoaDon extends javax.swing.JPanel {
   private SQLServerDataProvider dataProvider;
                 
        DefaultTableModel dtm = new DefaultTableModel();
        Connection connection =null;
        Statement statement = null;
        ResultSet resultSet = null;
    public HoaDon() {
        initComponents();
        String[] tieuDe = {"Mã hóa đơn", "Tên hóa đơn", "Phương thức mua hàng", "Tên người dùng", "Ngày tạo", "Tổng tiền"};
        dtm = new NonEditableTableModel(tieuDe); dtm = new NonEditableTableModel(tieuDe);
        dgvHD.setModel(dtm);
        dataProvider  = new SQLServerDataProvider();
        dataProvider.open(); 
        connection = dataProvider.getConnection(); 
        loadBang();
        dgvHD.addMouseListener(new java.awt.event.MouseAdapter() {

        public void dgvHDMouseClicked(java.awt.event.MouseEvent evt) {
            dgvHDMouseClicked(evt);
        }
    });
        
    }
   

    private void loadBang() {
     
                try {
                   if (connection != null) {
                       statement = connection.createStatement();
                       String sqlSelect = "SELECT HOADON.MAHD, HOADON.TENHOADON, HOADON.PHUONGTHUCMUAHANG, NGUOIDUNG.TEN, HOADON.NGAYTAO, HOADON.TONGTIEN " +
                                          "FROM HOADON " +
                                          "JOIN NGUOIDUNG ON HOADON.MAND = NGUOIDUNG.MAND";
                       resultSet = statement.executeQuery(sqlSelect);

                       dtm.setRowCount(0); 

                       while (resultSet.next()) {
                           long maHD = resultSet.getLong("MAHD");
                           String tenHoaDon = resultSet.getString("TENHOADON");
                           String phuongThucMuaHang = resultSet.getString("PHUONGTHUCMUAHANG");
                           String tenNguoiDung = resultSet.getString("TEN");
                           LocalDateTime ngayTao = resultSet.getObject("NGAYTAO", LocalDateTime.class);
                           BigDecimal tongTien = resultSet.getBigDecimal("TONGTIEN"); // Lấy dữ liệu từ cột TongTien
                           Object[] rowData = {maHD, tenHoaDon, phuongThucMuaHang, tenNguoiDung, ngayTao, tongTien}; // Thêm tongTien vào dữ liệu hàng
                           dtm.addRow(rowData);
                       }
                   } else {
                       System.out.println("Không thể kết nối tới CSDL.");
                   }
               } catch (SQLException ex) {
                   Logger.getLogger(HoaDon.class.getName()).log(Level.SEVERE, null, ex);
               } finally {
                   try {
                       if (resultSet != null) resultSet.close();
                       if (statement != null) statement.close();
                       if (connection != null) connection.close();
                   } catch (SQLException e) {
                       e.printStackTrace();
                   }
               }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        dgvHD = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lbMHD = new javax.swing.JLabel();
        lbTHD = new javax.swing.JLabel();
        lbPTTT = new javax.swing.JLabel();
        lbTND = new javax.swing.JLabel();
        lbNT = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        lbTT = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        btnXuatPDF = new javax.swing.JButton();
        btnXHD = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        btnXemCT = new javax.swing.JButton();

        dgvHD.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        dgvHD.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Tên hóa đơn", "Phương thức thanh toán", "Tên Người Dùng", "Ngày tạo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        dgvHD.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dgvHDMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(dgvHD);

        jPanel6.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("Hóa đơn mua hàng");

        lbMHD.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lbMHD.setText("MHD");

        lbTHD.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lbTHD.setText("THD");

        lbPTTT.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lbPTTT.setText("PTTT");

        lbTND.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lbTND.setText("TND");

        lbNT.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lbNT.setText("NT");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Phương thức thanh toán :");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Tên người dùng :");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Ngày tạo:");

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel11.setText("Mã hóa đơn:");

        jLabel12.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel12.setText("Tên Hóa đơn:");

        jLabel13.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel13.setText("Tổng tiền:");

        lbTT.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lbTT.setForeground(new java.awt.Color(255, 51, 0));
        lbTT.setText("Tổng tiền");

        btnXuatPDF.setText("Xuất hóa đơn sang PDF");
        btnXuatPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXuatPDFActionPerformed(evt);
            }
        });

        btnXHD.setText("Xóa Hóa Đơn");
        btnXHD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXHDActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(51, 255, 51));
        jButton1.setText("Xuất hóa đơn sang Excel");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnXemCT.setText("Xem Chi Tiết");
        btnXemCT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXemCTActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnXHD, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnXemCT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(12, 12, 12))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnXuatPDF, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(btnXHD, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnXemCT, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                .addGap(22, 22, 22)
                .addComponent(btnXuatPDF, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel13))
                        .addGap(25, 25, 25)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(lbTHD, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel1)
                                .addComponent(lbMHD, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lbPTTT, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbNT, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbTND, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbTT, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)))
                .addGap(79, 79, 79)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(359, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addGap(25, 25, 25)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(lbMHD, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(lbTHD, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(lbPTTT, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbTND, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbNT, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(45, 45, 45)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(lbTT, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1042, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(102, 102, 102)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(485, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(423, 423, 423))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void dgvHDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dgvHDMouseClicked
                    int selectedRow = dgvHD.getSelectedRow();
          if (selectedRow != -1) { // Nếu có hàng được chọn
              // Lấy dữ liệu từ hàng đã chọn
              long maHD = (long) dgvHD.getValueAt(selectedRow, 0);
              String tenHoaDon = (String) dgvHD.getValueAt(selectedRow, 1);
              String phuongThucMuaHang = (String) dgvHD.getValueAt(selectedRow, 2);
              String tenNguoiDung = (String) dgvHD.getValueAt(selectedRow, 3);
              LocalDateTime ngayTao = (LocalDateTime) dgvHD.getValueAt(selectedRow, 4);
              BigDecimal tongTien = (BigDecimal) dgvHD.getValueAt(selectedRow, 5);

              lbMHD.setText(String.valueOf(maHD));
              lbTHD.setText(tenHoaDon);
              lbPTTT.setText(phuongThucMuaHang);
              lbTND.setText(tenNguoiDung);
              DateTimeFormatter formatter2 = DateTimeFormatter.ofPattern("dd/MM/yyyy ");
              String formattedNgayTao = ngayTao.format(formatter2);
              lbNT.setText(formattedNgayTao);
              String tongTienStr = "$" + tongTien.toString();
              lbTT.setText(tongTienStr);

            

         
          }
    }//GEN-LAST:event_dgvHDMouseClicked

    private void loadDataToTable() {
            DefaultTableModel model = (DefaultTableModel) dgvHD.getModel();
            model.setRowCount(0); // Xóa tất cả các hàng hiện có

            SQLServerDataProvider dataProvider = new SQLServerDataProvider();
            dataProvider.open();

            String sql = "SELECT HOADON.MAHD, HOADON.TENHOADON, HOADON.PHUONGTHUCMUAHANG, NGUOIDUNG.TEN, HOADON.NGAYTAO, HOADON.TONGTIEN " +
                         "FROM HOADON " +
                         "JOIN NGUOIDUNG ON HOADON.MAND = NGUOIDUNG.MAND";

            try {
                ResultSet rs = dataProvider.executeQuery(sql);
                while (rs.next()) {
                    long maHD = rs.getLong("MAHD");
                    String tenHoaDon = rs.getString("TENHOADON");
                    String phuongThucMuaHang = rs.getString("PHUONGTHUCMUAHANG");
                    String tenNguoiDung = rs.getString("TEN");
                    String ngayTao = rs.getString("NGAYTAO");
                    String tongTien = rs.getString("TONGTIEN"); // Lấy giá trị TONGTIEN

                    model.addRow(new Object[]{maHD, tenHoaDon, phuongThucMuaHang, tenNguoiDung, ngayTao, tongTien});
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            } finally {
                dataProvider.close();
            }
}    private void deleteHoaDon() {
    String maHDString = lbMHD.getText();

    if (maHDString.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Vui lòng nhập mã hóa đơn cần xóa!", "Lỗi", JOptionPane.ERROR_MESSAGE);
        return;
    }

    long maHD;
    try {
        maHD = Long.parseLong(maHDString);
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, "Mã hóa đơn không hợp lệ!", "Lỗi", JOptionPane.ERROR_MESSAGE);
        return; // Kết thúc phương thức nếu chuỗi không thể chuyển đổi thành số
    }

    // Hiển thị hộp thoại xác nhận trước khi xóa
    int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn xóa hóa đơn này?", "Xác nhận xóa", JOptionPane.YES_NO_OPTION);
    if (confirm != JOptionPane.YES_OPTION) {
        return; // Kết thúc phương thức nếu người dùng không xác nhận xóa
    }

    // Tiếp tục xử lý xóa hóa đơn
    SQLServerDataProvider dataProvider = new SQLServerDataProvider();
    dataProvider.open();

    try {
        // Tạo câu lệnh DELETE để xóa các chi tiết hóa đơn có mã là maHD
        String sqlDeleteDetails = "DELETE FROM CHITIETHOADON WHERE MAHD = " + maHD;
        dataProvider.executeUpdate(sqlDeleteDetails);

        // Tạo câu lệnh DELETE để xóa hóa đơn có mã là maHD
        String sqlDelete = "DELETE FROM HOADON WHERE MAHD = " + maHD;
        int rowsAffected = dataProvider.executeUpdate(sqlDelete);

        // Kiểm tra và thông báo cho người dùng biết kết quả
        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(this, "Đã xóa hóa đơn thành công!");
            loadDataToTable();
        } else {
            JOptionPane.showMessageDialog(this, "Không thể xóa hóa đơn!", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Lỗi khi xóa hóa đơn: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
    } finally {
        // Đóng kết nối tới cơ sở dữ liệu sau khi hoàn thành công việc xóa hóa đơn
        dataProvider.close();
    }
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
         int[] selectedRows = dgvHD.getSelectedRows();

    if (selectedRows.length > 0) {
        int option = JOptionPane.showConfirmDialog(this, "Bạn có chắc muốn xuất hóa đơn đã chọn?", "Xác Nhận", JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.YES_OPTION) {
            for (int i = 0; i < selectedRows.length; i++) {
                int rowIndex = selectedRows[i];
                // Lấy dữ liệu từ hàng đã chọn
                long maHD = (long) dgvHD.getValueAt(rowIndex, 0);
                String tenHoaDon = (String) dgvHD.getValueAt(rowIndex, 1);
                String phuongThucMuaHang = (String) dgvHD.getValueAt(rowIndex, 2);
                String tenNguoiDung = (String) dgvHD.getValueAt(rowIndex, 3);
                LocalDateTime ngayTao = (LocalDateTime) dgvHD.getValueAt(rowIndex, 4);
                BigDecimal tongTien = (BigDecimal) dgvHD.getValueAt(rowIndex, 5);

                

                // Tạo workbook và sheet Excel mới
                XSSFWorkbook workbook = new XSSFWorkbook();
                XSSFSheet sheet = workbook.createSheet("Hoadon");

                // Tạo hàng và cột cho dữ liệu hóa đơn
                XSSFRow headerRow = sheet.createRow(0);
                XSSFCell cell = headerRow.createCell(0, CellType.STRING);
                cell.setCellValue("Mã hóa đơn");
                cell = headerRow.createCell(1, CellType.STRING);
                cell.setCellValue("Tên hóa đơn");
                cell = headerRow.createCell(2, CellType.STRING);
                cell.setCellValue("Phương thức mua hàng");
                cell = headerRow.createCell(3, CellType.STRING);
                cell.setCellValue("Tên người dùng");
                cell = headerRow.createCell(4, CellType.STRING);
                cell.setCellValue("Ngày tạo");
                cell = headerRow.createCell(5, CellType.STRING);
                cell.setCellValue("Tổng tiền ");


                // Tạo hàng mới cho dữ liệu của hóa đơn đã chọn
                XSSFRow dataRow = sheet.createRow(1);
                cell = dataRow.createCell(0, CellType.NUMERIC);
                cell.setCellValue(maHD);
                cell = dataRow.createCell(1, CellType.STRING);
                cell.setCellValue(tenHoaDon);
                cell = dataRow.createCell(2, CellType.STRING);
                cell.setCellValue(phuongThucMuaHang);
                cell = dataRow.createCell(3, CellType.STRING);
                cell.setCellValue(tenNguoiDung);
                cell = dataRow.createCell(4, CellType.STRING);
                cell.setCellValue(ngayTao.toString()); // Chuyển LocalDateTime thành chuỗi
                
                cell = dataRow.createCell(5, CellType.STRING); // Tạo một ô mới cho tổng tiền
                cell.setCellValue(tongTien.toString()); 
                // Tạo tên tệp dựa trên mã hóa đơn hoặc số thứ tự của hàng
                String fileName = "Hoadon_" + maHD + ".xlsx";

                // Lưu workbook vào một tập tin Excel
                try (FileOutputStream fileOut = new FileOutputStream(fileName)) {
                    workbook.write(fileOut);
                    System.out.println("Excel file exported successfully: " + fileName);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            // Hiển thị thông báo sau khi xuất file thành công
            JOptionPane.showMessageDialog(this, "Hóa đơn đã được xuất thành công!", "Thông Báo", JOptionPane.INFORMATION_MESSAGE);
        }
    } else {
        JOptionPane.showMessageDialog(this, "Vui lòng chọn ít nhất một hóa đơn để xuất!", "Thông Báo", JOptionPane.WARNING_MESSAGE);
    }

        // Tiếp theo, bạn có thể ghi workbook vào một tập tin Excel

    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnXuatPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXuatPDFActionPerformed
                                                
     int[] selectedRows = dgvHD.getSelectedRows();

    if (selectedRows.length > 0) {
        int option = JOptionPane.showConfirmDialog(this, "Bạn có chắc muốn xuất hóa đơn đã chọn?", "Xác Nhận", JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.YES_OPTION) {
            for (int i = 0; i < selectedRows.length; i++) {
                int rowIndex = selectedRows[i];
                long maHD = (long) dgvHD.getValueAt(rowIndex, 0);
                String tenHoaDon = (String) dgvHD.getValueAt(rowIndex, 1);
                String phuongThucMuaHang = (String) dgvHD.getValueAt(rowIndex, 2);
                String tenNguoiDung = (String) dgvHD.getValueAt(rowIndex, 3);
                LocalDateTime ngayTao = (LocalDateTime) dgvHD.getValueAt(rowIndex, 4);
                BigDecimal tongTien = (BigDecimal) dgvHD.getValueAt(rowIndex, 5);

                // Tạo tệp PDF cho hóa đơn
                try {
                    Document document = new Document();
                    PdfWriter.getInstance(document, new FileOutputStream("HoaDon_" + maHD + ".pdf"));
                    document.open();

                    // Tiêu đề hóa đơn
                    Font titleFont = new Font(Font.FontFamily.TIMES_ROMAN, 24, Font.BOLD);
                    Paragraph title = new Paragraph("HOA DON MUA HANG", titleFont);
                    title.setAlignment(Element.ALIGN_CENTER);
                    Font subtitleFont = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);
                    Paragraph subtitle = new Paragraph("Sieu Thi ABC", subtitleFont);
                    subtitle.setAlignment(Element.ALIGN_CENTER);
                   
                     Font infoFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
                 
                   
                
                    
                    document.add(title);
                    document.add(subtitle);
                    // Thông tin hóa đơn
//                    Font infoFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
                   PdfPTable table = new PdfPTable(2); // Số cột của bảng (2 cột: tên tiêu đề và giá trị)

           

                // Thêm các thông tin tiêu đề và giá trị vào bảng
                table.addCell(new Phrase("Mã hóa đơn: " + maHD, infoFont));
                table.addCell(new Phrase("Tên hóa đơn: " + tenHoaDon, infoFont));
                table.addCell(new Phrase("Phương thức mua hàng: " + phuongThucMuaHang, infoFont));
                table.addCell(new Phrase("Tên người dùng: " + tenNguoiDung, infoFont));
                table.addCell(new Phrase("Tổng tiền: " + tongTien, infoFont));
                table.addCell(new Phrase("Ngày tạo: " + ngayTao.format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss")), infoFont));

                // Thêm bảng vào tài liệu
                document.add(table);
                    // Kết thúc tài liệu
                    document.close();

                    // Thông báo xuất PDF thành công
                    JOptionPane.showMessageDialog(this, "Xuất PDF thành công: HoaDon_" + maHD + ".pdf", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                } catch (DocumentException | FileNotFoundException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Đã xảy ra lỗi khi tạo tệp PDF!", "Lỗi", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    } else {
        JOptionPane.showMessageDialog(this, "Vui lòng chọn ít nhất một hóa đơn để xuất PDF!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
    }
    }//GEN-LAST:event_btnXuatPDFActionPerformed

    private void btnXHDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXHDActionPerformed
       deleteHoaDon();
    }//GEN-LAST:event_btnXHDActionPerformed

    private void btnXemCTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXemCTActionPerformed
 int selectedRow = dgvHD.getSelectedRow();
    if (selectedRow != -1) {
        long selectedMaHD = (long) dgvHD.getValueAt(selectedRow, 0); // Lấy MAHD từ hàng được chọn trong JTable
        ChiTietHoaDonView xemChiTiet = new ChiTietHoaDonView(selectedMaHD);
        xemChiTiet.setVisible(true);
    } else {
        JOptionPane.showMessageDialog(this, "Vui lòng chọn hóa đơn để xem chi tiết!", "Lỗi", JOptionPane.ERROR_MESSAGE);
    }
 
    
    }//GEN-LAST:event_btnXemCTActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnXHD;
    private javax.swing.JButton btnXemCT;
    private javax.swing.JButton btnXuatPDF;
    private javax.swing.JTable dgvHD;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbMHD;
    private javax.swing.JLabel lbNT;
    private javax.swing.JLabel lbPTTT;
    private javax.swing.JLabel lbTHD;
    private javax.swing.JLabel lbTND;
    private javax.swing.JLabel lbTT;
    // End of variables declaration//GEN-END:variables

    
}
